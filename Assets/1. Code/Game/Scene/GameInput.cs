//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/1. Code/Game/Scene/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""14fb77fe-7b98-4c84-8b39-0aeec0aaaf18"",
            ""actions"": [
                {
                    ""name"": ""CursorMove"",
                    ""type"": ""Value"",
                    ""id"": ""420e8bd0-fd83-4c9b-a133-e27cd4e1393f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""95224d65-569b-4f55-98e6-488eb982fc4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""0d90f40d-6772-4fb6-aa12-3d5e00018b20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movement"",
                    ""id"": ""2be63055-ecd0-4db2-b7bf-f0a8687f06ee"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b0ec66a0-1605-4a3c-979f-e0ef98afbd1c"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""21baa74e-ffcf-419b-93b2-19423672f8cb"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""97befd9d-2285-4b55-800c-fb6e5c0deb55"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77513995-a9fe-4b12-977c-caa9a550ffa7"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""feb6a174-6f80-44d1-aacb-a156994e7bff"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CursorMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34057e42-da38-4f0c-b14a-acb232b8bb14"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""144dbbfb-580f-4ef2-ac6b-de677358d2d1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d79226c5-6333-4288-9e80-6f682cf11e35"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2d461d8-c12a-4875-8ef2-2f2df7fb0218"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2760ac5f-9b71-42b8-b55b-78abe5772019"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MCQMapping"",
            ""id"": ""8641854e-efa2-4e5e-8bb2-e51273819ec7"",
            ""actions"": [
                {
                    ""name"": ""Option Bottom"",
                    ""type"": ""Button"",
                    ""id"": ""e00664fe-6a95-420c-86c8-db29515c264a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option Right"",
                    ""type"": ""Button"",
                    ""id"": ""60a5116b-521d-4053-849e-772fda5d6e53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option Top"",
                    ""type"": ""Button"",
                    ""id"": ""2119bc35-b4f7-4cb7-b383-da7441055516"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option Left"",
                    ""type"": ""Button"",
                    ""id"": ""ea4fd53d-0a03-4c29-9457-ee0655a46945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option Misc"",
                    ""type"": ""Button"",
                    ""id"": ""c6ebb6c8-a2f2-4a50-aadc-370e5c1d50fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""253a1715-f520-4faa-a993-604c14dd8e82"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Option Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4ac78fa-f7ea-4fa1-8849-bda718157c6b"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Option Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""755ef1ae-af68-42a2-8ded-57d2a4c9b994"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Option Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45e33294-e67b-4dde-82a7-f856c6a9a903"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Option Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28fb3c7b-c2d6-4da8-8766-2835684cd6d4"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Option Misc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_CursorMove = m_UI.FindAction("CursorMove", throwIfNotFound: true);
        m_UI_Select = m_UI.FindAction("Select", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        // MCQMapping
        m_MCQMapping = asset.FindActionMap("MCQMapping", throwIfNotFound: true);
        m_MCQMapping_OptionBottom = m_MCQMapping.FindAction("Option Bottom", throwIfNotFound: true);
        m_MCQMapping_OptionRight = m_MCQMapping.FindAction("Option Right", throwIfNotFound: true);
        m_MCQMapping_OptionTop = m_MCQMapping.FindAction("Option Top", throwIfNotFound: true);
        m_MCQMapping_OptionLeft = m_MCQMapping.FindAction("Option Left", throwIfNotFound: true);
        m_MCQMapping_OptionMisc = m_MCQMapping.FindAction("Option Misc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_CursorMove;
    private readonly InputAction m_UI_Select;
    private readonly InputAction m_UI_Cancel;
    public struct UIActions
    {
        private @GameInput m_Wrapper;
        public UIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorMove => m_Wrapper.m_UI_CursorMove;
        public InputAction @Select => m_Wrapper.m_UI_Select;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @CursorMove.started += instance.OnCursorMove;
            @CursorMove.performed += instance.OnCursorMove;
            @CursorMove.canceled += instance.OnCursorMove;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @CursorMove.started -= instance.OnCursorMove;
            @CursorMove.performed -= instance.OnCursorMove;
            @CursorMove.canceled -= instance.OnCursorMove;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // MCQMapping
    private readonly InputActionMap m_MCQMapping;
    private List<IMCQMappingActions> m_MCQMappingActionsCallbackInterfaces = new List<IMCQMappingActions>();
    private readonly InputAction m_MCQMapping_OptionBottom;
    private readonly InputAction m_MCQMapping_OptionRight;
    private readonly InputAction m_MCQMapping_OptionTop;
    private readonly InputAction m_MCQMapping_OptionLeft;
    private readonly InputAction m_MCQMapping_OptionMisc;
    public struct MCQMappingActions
    {
        private @GameInput m_Wrapper;
        public MCQMappingActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OptionBottom => m_Wrapper.m_MCQMapping_OptionBottom;
        public InputAction @OptionRight => m_Wrapper.m_MCQMapping_OptionRight;
        public InputAction @OptionTop => m_Wrapper.m_MCQMapping_OptionTop;
        public InputAction @OptionLeft => m_Wrapper.m_MCQMapping_OptionLeft;
        public InputAction @OptionMisc => m_Wrapper.m_MCQMapping_OptionMisc;
        public InputActionMap Get() { return m_Wrapper.m_MCQMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MCQMappingActions set) { return set.Get(); }
        public void AddCallbacks(IMCQMappingActions instance)
        {
            if (instance == null || m_Wrapper.m_MCQMappingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MCQMappingActionsCallbackInterfaces.Add(instance);
            @OptionBottom.started += instance.OnOptionBottom;
            @OptionBottom.performed += instance.OnOptionBottom;
            @OptionBottom.canceled += instance.OnOptionBottom;
            @OptionRight.started += instance.OnOptionRight;
            @OptionRight.performed += instance.OnOptionRight;
            @OptionRight.canceled += instance.OnOptionRight;
            @OptionTop.started += instance.OnOptionTop;
            @OptionTop.performed += instance.OnOptionTop;
            @OptionTop.canceled += instance.OnOptionTop;
            @OptionLeft.started += instance.OnOptionLeft;
            @OptionLeft.performed += instance.OnOptionLeft;
            @OptionLeft.canceled += instance.OnOptionLeft;
            @OptionMisc.started += instance.OnOptionMisc;
            @OptionMisc.performed += instance.OnOptionMisc;
            @OptionMisc.canceled += instance.OnOptionMisc;
        }

        private void UnregisterCallbacks(IMCQMappingActions instance)
        {
            @OptionBottom.started -= instance.OnOptionBottom;
            @OptionBottom.performed -= instance.OnOptionBottom;
            @OptionBottom.canceled -= instance.OnOptionBottom;
            @OptionRight.started -= instance.OnOptionRight;
            @OptionRight.performed -= instance.OnOptionRight;
            @OptionRight.canceled -= instance.OnOptionRight;
            @OptionTop.started -= instance.OnOptionTop;
            @OptionTop.performed -= instance.OnOptionTop;
            @OptionTop.canceled -= instance.OnOptionTop;
            @OptionLeft.started -= instance.OnOptionLeft;
            @OptionLeft.performed -= instance.OnOptionLeft;
            @OptionLeft.canceled -= instance.OnOptionLeft;
            @OptionMisc.started -= instance.OnOptionMisc;
            @OptionMisc.performed -= instance.OnOptionMisc;
            @OptionMisc.canceled -= instance.OnOptionMisc;
        }

        public void RemoveCallbacks(IMCQMappingActions instance)
        {
            if (m_Wrapper.m_MCQMappingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMCQMappingActions instance)
        {
            foreach (var item in m_Wrapper.m_MCQMappingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MCQMappingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MCQMappingActions @MCQMapping => new MCQMappingActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnCursorMove(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface IMCQMappingActions
    {
        void OnOptionBottom(InputAction.CallbackContext context);
        void OnOptionRight(InputAction.CallbackContext context);
        void OnOptionTop(InputAction.CallbackContext context);
        void OnOptionLeft(InputAction.CallbackContext context);
        void OnOptionMisc(InputAction.CallbackContext context);
    }
}
